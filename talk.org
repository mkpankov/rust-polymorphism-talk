#+TITLE: ООП на Rust
#+AUTHOR: Панков Михаил
#+DATE: 18 мая 2017
#+EMAIL: work@michaelpankov.com
#+LANGUAGE: ru
#+CATEGORY: task
#+OPTIONS:   H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+startup: beamer
#+LaTeX_CLASS: beamer
# +LaTeX_CLASS_OPTIONS: [notes]
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+latex_header: \usepackage[english,russian]{babel}
#+latex_header: \mode<beamer>{\usetheme[background=dark]{metropolis}}

* Обо мне

** Кто я

- Системный программист
  - Компилятор, операционные системы
  - Инфраструктура обеспечения качества Kaspersky OS
  - Русскоязычное сообщество Rust [[http://rustycrate.ru][rustycrate.ru]]

* Задача

** Задача

- Построить иерархию объектов в ООП-стиле

* Что значит в ООП-стиле?

** Основные понятия ООП

- Абстракция данных
- Инкапсуляция
- Cокрытие
- Наследование
- Полиморфизм подтипов

***                                                                  :B_note:
    :PROPERTIES:
    :BEAMER_env: note
    :END:

Наследования нет. Альтернатива - композиция.

Полиморфизма подтипов нет. Альтернатива - типажи.

* Зачем нужны основные понятия ООП

** Абстракция данных
  - Объединение данных одной сущности

** Инкапсуляция
  - Методы работы с данными объединены с самими данными

** Наследование
  - Методы могут переиспользовать общий код

** Полиморфизм подтипов
  - С подклассами можно работать как с надклассами

* Решение

** Предметная область

- Фигуры
- Печать самих фигур
- Подсчёт их площади

* Самая наивная реализация

** Реализация без всего: структуры

#+BEGIN_SRC rust
  struct Rectangle {
      width: f64, length: f64,
  }
  impl Rectangle {
      fn area(&self) -> f64 { self.width
                            ,* self.length }
  }
  struct Square {
      side: f64,
  }
  impl Square {
      fn area(&self) -> f64 { self.side * self.side }
  }
#+END_SRC

** Реализация без всего: использование

#+BEGIN_SRC rust
fn main() {
    let rect1 = Rectangle { width: 3., length: 5. };
    let rect2 = Rectangle { width: 4., length: 6. };
    let sq1 = Square { side: 8. };
    let sq2 = Square { side: 4. };
    let rects = [&rect1, &rect2];
    let squares = [&sq1, &sq2];
    for r in rects.iter() {
        println!("Площадь равна {}", r.area());
    }
    for s in squares.iter() {
        println!("Площадь равна {}", s.area());
    }
}
#+END_SRC

** Реализация без всего: результат

#+BEGIN_SRC text
Площадь равна 15
Площадь равна 24
Площадь равна 64
Площадь равна 16
#+END_SRC

** Замечание

- Хотим печатать фигуру

** Печатаем саму фигуру

#+BEGIN_SRC rust
  impl Display for Rectangle {
      fn fmt(&self, f: &mut Formatter) -> Result {
          write!(f, "прямоугольник({}, {})",
                 self.width, self.length)
      }
  }
  impl Display for Square { ... }
  for r in rects.iter() {
      println!("Площадь {} равна {}", r, r.area());
  }
  for s in squares.iter() {
      println!("Площадь {} равна {}", s, s.area());
  }
#+END_SRC

** Печатаем фигуру: результат

#+BEGIN_SRC text
Площадь прямоугольник(3, 5) равна 15
Площадь прямоугольник(4, 6) равна 24
Площадь квадрат(8) равна 64
Площадь квадрат(4) равна 16
#+END_SRC

** Реализация без всего: оценка

- Хорошо
  - Можно написать не глядя
- Плохо
  - Новый тип --- новый код
  - Нет наследования кода
  - Нет обобщённой обработки

* Обобщим немного

** Вводим перечисление

#+BEGIN_SRC rust
#[derive(Debug)]
enum Figure {
    Rect(Rectangle),
    Sq(Square),
}

impl Figure {
    fn area(&self) -> f64 {
        match self {
            &Figure::Rect(ref r) => r.area(),
            &Figure::Sq(ref s) => s.area(),
        }
    }
}

#+END_SRC

** Используем перечисление

#+BEGIN_SRC rust
  let rect1 = Figure::Rect(
      Rectangle { width: 3., length: 5. });
  let rect2 = ...;
  let sq1 = Figure::Sq(
      Square { side: 8. });
  let sq2 = ...;

  let figures = [&rect1, &rect2, &sq1, &sq2];

  for f in figures.iter() {
      println!("Площадь {:?} равна {}", f, f.area());
  }

#+END_SRC

** Объединение через перечисление: оценка

- Хорошо
  - Очень просто
  - Обобщённая обработка
- Плохо
  - /Новый тип --- новый код/
  - /Нет наследования кода/
  - Размер объектов максимален
  - Диспетчер вызовов --- вручную

* Как унаследовать код?

** Унаследуем код очень просто

#+BEGIN_SRC rust
  struct Square {
      rect: Rectangle
  }
  impl Square {
      fn area(&self) -> f64 {
          self.rect.area()
      }
  }
  let sq1 = Figure::Sq(
      Square {
          rect: Rectangle {
              width: 8., length: 8. } } );
#+END_SRC

** Объединение с <<наследованием>>: оценка

- Хорошо
  - Очень просто
  - Обобщённая обработка
  - Переиспользование кода
- Плохо
  - /Новый тип --- новый код/
  - /Размер объектов максимален/
  - /Диспетчер вызовов --- вручную/
  - Проброс вызова наследуемого метода вручную
  - Наследуемый метод работает в контексте родителя

* Типажи

** Типажи: структуры точки и фигуры

#+BEGIN_SRC rust
#[derive(Clone, Copy, Debug)]
struct Point {
    x: f64,
    y: f64,
}

#[derive(Debug)]
struct Figure {
    origin: Point,
}
#+END_SRC

** Типажи: структуры прямоугольника и квадрата

#+BEGIN_SRC rust
#[derive(Debug)]
struct Rectangle {
    figure: Figure,
    width: f64,
    length: f64,
}

#[derive(Debug)]
struct Square {
    rectangle: Rectangle,
}
#+END_SRC

** Типажи: реализация типажей

#+BEGIN_SRC rust
  trait Area {
      fn area(&self) -> f64;
  }
  impl Area for Rectangle {
      fn area(&self) -> f64 {
          self.width * self.length
      }
  }
  impl Area for Square {
      fn area(&self) -> f64 {
          self.rectangle.width
              ,* self.rectangle.length
      }
  }
#+END_SRC

** Типажи: создание структур

#+BEGIN_SRC rust
  fn main() {
      let origin = Point { x: 0., y: 0. };
      ...
      let sq1 = Square {
          rectangle: Rectangle {
              figure: Figure {
                  origin: origin
              },
              width: 4.,
              length: 4.,
          }
      };
      ...
  }
#+END_SRC

** Типажи: использование

#+BEGIN_SRC rust
  let rects = [&rect1, &rect2];
  for r in rects {
      println!("Площадь равна {}", r.area());
  }
  let sq1 = [&sq1, &sq2];
  for s in squares {
      println!("Площадь равна {}", r.area());
  }

#+END_SRC

** Типажи: оценка

- Хорошо
  - Достаточно просто
- Плохо
  - Не можем обобщённо обработать все объекты
  - Нет наследования

* Добавляем наследование через типажи

** Вводим площадь прямоугольников

#+BEGIN_SRC rust
trait Rect {
    fn width(&self) -> f64;
    fn length(&self) -> f64;
}

trait AreaRect: Rect {
    fn area(&self) -> f64 {
        self.width() * self.length()
    }
}
#+END_SRC

** Делаем квадрат прямоугольником

#+BEGIN_SRC rust
  impl Rect for Rectangle {
      fn width(&self) -> f64 { self.width }
      fn length(&self) -> f64 { self.length }
  }
  #[derive(Debug)]
  struct Square {
      figure: Figure,
      side: f64,
  }
  impl Rect for Square {
      fn width(&self) -> f64 { self.side }
      fn length(&self) -> f64 { self.side }
  }
#+END_SRC

** Добавляем прямоугольникам площадь

#+BEGIN_SRC rust
impl AreaRect for Rectangle { }

impl AreaRect for Square { }
#+END_SRC

** <<Наследование>> через типажи

- Общая реализация для всех типов
- Не классическое наследование

* Добавляем инкапсуляцию

** Метод создания точки

#+BEGIN_SRC rust
    #[derive(Clone, Copy, Debug)]
    struct Point {
        x: f64,
        y: f64,
    }

    impl Point {
        fn new(x: f64, y: f64) -> Self {
            Point { x: x, y: y }
        }
    }
#+END_SRC

** Создание точки

#+BEGIN_SRC rust
  let origin = Point::new(0., 0.);
#+END_SRC

** Не мешает прямой работе

- Можем сконструировать точку
#+BEGIN_SRC rust
  let origin = Point { x: 0., y: 0. };
#+END_SRC
- Можем сконструировать фигуру, которая вообще виртуальна
#+BEGIN_SRC rust
  let figure = Figure { origin: origin };
#+END_SRC

* Добавляем сокрытие

** Уносим всё в модули

#+BEGIN_SRC rust
  mod figure {
      struct Point { ... }
      struct Figure { ... }
      pub mod rectangle {
          pub struct Rectangle { ... }
          impl Rectangle {
              pub fn new(...) -> Self { ... }
          }
          pub mod square { ... }
      }
  }
#+END_SRC

** Больше не можем работать напрямую

#+BEGIN_SRC rust
  fn main {
      // error[E0422]: cannot find struct, variant
      // or union type `Point` in this scope
      let origin = Point { x: 0., y: 0. };
      // error[E0422]: cannot find struct, variant
      // or union type `Figure` in this scope
      let figure = Figure { origin: origin };
  }
#+END_SRC

** Модульная реализация: оценка

- Запрещаем прямой доступ к полям

* Как обобщённо напечатать

** Как обобщённо напечатать

#+BEGIN_SRC rust
  fn print_areas(figures: &[&AreaRect]) {
      for f in figures {
          println!("{}", f.area());
      }
  }
  fn main() {
      ...
      let rect1 = Rectangle::new(origin, 5., 7.);
      let rect2 = Rectangle::new(origin, 3., 9.);
      let sq1 = Square::new(origin, 4.);
      print_areas(&[&rect1, &rect2, &sq1]);
  }

#+END_SRC

** Результат

#+BEGIN_SRC text
35
27
16
#+END_SRC

** Что мы на самом деле хотели

#+BEGIN_SRC rust
  fn print_areas(figures: &[&(AreaRect + Debug)]) {
      for f in figures {
          println!("{:?}", f, f.area());
      }
  }
#+END_SRC

** ... но это не работает

#+BEGIN_SRC text
  error[E0225]: only Send/Sync traits can be used
  as additional traits in a trait object
     --> src/main.rs:110:40
      |
  110 | fn print_areas(figures: &[&(AreaRect + Debug)]) {
      |                                        ^^^^^
      |                non-Send/Sync additional trait

#+END_SRC

** Есть костыль

#+BEGIN_SRC rust
  fn print_areas(figures: &[&Debug],
                 figures_for_area: &[&AreaRect]) {
      for (f1, f2) in figures.iter()
                 .zip(figures_for_area.iter()) {
              println!("Площадь {:?} равна {}",
                       f1, f2.area());
      }
  }

  fn main() {
      ...
      print_areas(&[&rect1, &rect2, &sq1],
                  &[&rect1, &rect2, &sq1]);
  }
#+END_SRC

** Работает!

#+BEGIN_SRC text
  Площадь Rectangle { ... width: 5, length: 7 }
    равна 35
  Площадь Rectangle { ... width: 3, length: 9 }
    равна 27
  Площадь Square { ... width: 4, length: 4 } }
    равна 16
#+END_SRC

* Обобщаем все свойства

** Обобщаем все свойства: объединяющий типаж

#+BEGIN_SRC rust
  pub trait MyRect: Rect + AreaRect + Debug {}

  impl MyRect for Rectangle { }

  impl MyRect for Square { }
#+END_SRC

** Обобщаем все свойства: использование типажа-объекта

#+BEGIN_SRC rust
  fn print_areas(figures: &[&MyRect]) {
      for f in figures {
          println!("Площадь {:?} равна {}",
                   f, f.area());
      }
  }
#+END_SRC

** Работает!

#+BEGIN_SRC text
  Площадь Rectangle { ... width: 5, length: 7 }
    равна 35
  Площадь Rectangle { ... width: 3, length: 9 }
    равна 27
  Площадь Square { ... width: 4, length: 4 } }
    равна 16
#+END_SRC

* Проблема с обобщением площади

** Добавим эллиптические фигуры

#+BEGIN_SRC rust
  pub trait Elliptic {
      fn a(&self) -> f64;
      fn b(&self) -> f64;
  }
  pub trait AreaElliptic: Elliptic {
      fn area(&self) -> f64 {
          PI * self.a() * self.b()
      }
  }
  pub struct Ellipse { ... }
  impl AreaElliptic for Ellipse { }
  pub struct Circle { ... }
  impl AreaElliptic for Circle { }
#+END_SRC

** Печать расщепляется

#+BEGIN_SRC rust
  fn print_areas_rect(figures: &[&MyRect]) {
      for f in figures {
          println!("Площадь {:?} равна {}",
                   f, f.area());
      }
  }

  fn print_areas_elliptic(figures: &[&MyElliptic]) {
      for f in figures {
          println!("Площадь {:?} равна {}",
                   f, f.area());
      }
  }
#+END_SRC

** Обобщаем площадь обратно

#+BEGIN_SRC rust
  pub trait Area {
      fn area(&self) -> f64;
  }
  pub trait MyFigure: Area + Debug {}
  impl Area for Rectangle {
      fn area(&self) -> f64 {
          self.width * self.length
      }
  }
  impl MyFigure for Rectangle { }
  impl Area for Square {
      fn area(&self) -> f64 { self.rectangle.area() }
  }
  impl MyFigure for Square { }

#+END_SRC

** Как выбирать?

- Зависит от предметной области
- Наследование через типаж
  - Если все структуры в одной ветви иерархии
- Прямая реализация типажа
  - Если структуры образуют разветвлённую иерархию

* Поддержите на Patreon

** Поддержите на Patreon

- https://www.patreon.com/mkpankov

* Спасибо!

* Backup
